# .github/workflows/deploy.yml

name: Deploy Go Application

# 触发条件：当有代码 push 到 main 分支时
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    # 运行环境：使用最新的 Ubuntu
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Go 环境
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5' # 使用您的 Go 版本

      # 步骤 3: 安装依赖
      - name: Install Dependencies
        run: go mod tidy

      # 步骤 4: 构建应用
      # GOOS=linux GOARCH=amd64 确保在任何系统上都能编译出 Linux 64位的二进制文件
      # -o my-app-binary 指定输出的二进制文件名
      - name: Build
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o my-blog-server ./cmd/main.go

      - name: Prepare artifact name (rename to .new)
        run: mv my-blog-server my-blog-server.new

      # 步骤 5: 部署到服务器
      - name: Sync files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "my-blog-server.new" # 上传临时文件名，避免覆盖进行中
          target: "/www/wwwroot/Personal-Website-backend/" # 服务器上的目标目录

      # 步骤 6: 在服务器上重启应用
      - name: Atomic replace and restart service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            set -euo pipefail
            cd /www/wwwroot/Personal-Website-backend
            # 确保可执行权限
            chmod +x my-blog-server.new
            # 原子替换
            mv -f my-blog-server.new my-blog-server
            # 重启服务
            sudo systemctl restart my-blog-server.service
            # 检查服务状态以确认重启成功
            sudo systemctl status my-blog-server.service